{"version":3,"sources":["layouts/MainLayout.module.css","assets/home.svg","assets/loading.gif","screens/home/HomeScreen.tsx","components/navbar/Navbar.tsx","components/particles/Particles.tsx","components/movie-card/MovieCard.tsx","components/loading/Loading.tsx","store/store.tsx","api/utils/simple-fetch.ts","api/urls.ts","store/api/api-actions.ts","screens/films/FilmScreen.tsx","components/table/Table.tsx","screens/people/PeopleScreen.tsx","layouts/MainLayout.tsx","App.tsx","serviceWorker.ts","index.tsx","components/navbar/Navbar.module.css"],"names":["module","exports","HomeScreen","className","getPosition","pos","justifyContent","NavBar","items","position","styles","container","to","homeIcon","src","HomeIMG","alt","menu","style","map","item","key","Particles","top","left","width","height","zIndex","params","particles","number","value","density","enable","value_area","line_linked","opacity","move","direction","MoveDirection","right","speed","size","anim","opacity_min","interactivity","events","onclick","mode","onHover","modes","push","particles_nb","bubble","retina_detect","MovieCard","text","content","useRef","useEffect","TimelineLite","current","split","length","padding","border","borderRadius","ref","Loading","LoadingGIF","initialReducerState","films","characters","totalCharacters","initialStateStore","state","dispatch","store","React","createContext","Provider","reducer","action","type","payload","results","count","StateProvider","children","useReducer","requiredOptions","headers","defaultOptions","method","simpleFetch","url","options","Promise","resolve","reject","fetch","then","res","json","data","catch","message","error","URL","people","process","peopleWithPagination","page","getFilms","getCharactersWithPagination","FilmScreen","useState","setFilms","globalState","useContext","id","setTimeout","clearTimeout","film","Card","title","gridColumnStart","isSelected","onClick","prevState","newFilm","CardContent","episode_id","director","opening_crawl","Column","Table","TableComponent","columns","pagination","onPaginationChange","paginationState","setPagination","dataSource","onChange","pag","column","render","dataIndex","filters","onFilter","defaultProps","isEmpty","array","record","console","log","eye_color","indexOf","gender","some","PeopleScreen","setCharacters","mapLinksToName","reduce","prev","character","newFilms","filmUrl","formatForTable","total","prevPage","showSizeChanger","MainLayout","App","display","margin","path","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a766d8cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MainLayout_container__2V38b\",\"title\":\"MainLayout_title__1gIHn\"};","module.exports = __webpack_public_path__ + \"static/media/home.87954d9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.cd795592.gif\";","import React from 'react'\nimport './HomeScreen.scss'\n\nconst HomeScreen = () => (\n    <>\n        <h1 className=\"home-title\">STAR WARS</h1>\n    </>\n)\n\nexport default HomeScreen\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from './Navbar.module.css'\nimport { NavbarProps } from './Navbar.model'\nimport HomeIMG from '../../assets/home.svg'\n\nfunction getPosition(pos: NavbarProps['position']): React.CSSProperties {\n    switch (pos) {\n        case 'end':\n            return {\n                justifyContent: 'flex-end',\n            }\n        case 'center':\n            return {\n                justifyContent: 'center',\n            }\n        case 'start':\n            return {\n                justifyContent: 'flex-start',\n            }\n        default:\n            return {\n                justifyContent: 'flex-end',\n            }\n    }\n}\n\nconst NavBar = ({ items, position }: NavbarProps): JSX.Element => (\n    <nav className={styles.container}>\n        <Link to=\"/\" className={styles.homeIcon}>\n            <img src={HomeIMG} alt=\"home\" />\n            {' '}HOME\n        </Link>\n\n        <ul className={styles.menu} style={getPosition(position)}>\n            {items.map((item) => (\n                <li key={item} className={styles.items}>\n                    <Link to={item}>{item}</Link>\n                </li>\n            ))}\n        </ul>\n    </nav>\n)\n\nexport default NavBar\n","import React from 'react'\nimport ReactParticles, { MoveDirection } from 'react-particles-js'\n\nconst Particles = (): JSX.Element => (\n  <div\n    style={{\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      zIndex: -1,\n    }}\n  >\n    <ReactParticles\n      width=\"100vw\"\n      height=\"100vh\"\n      params={{\n        particles: {\n          number: {\n            value: 250,\n            density: {\n              enable: true,\n              value_area: 1500,\n            },\n          },\n          line_linked: {\n            enable: true,\n            opacity: 0.02,\n          },\n          move: {\n            direction: MoveDirection.right,\n            speed: 0.15,\n          },\n          size: {\n            value: 1.5,\n          },\n          opacity: {\n            anim: {\n              enable: true,\n              speed: 1,\n              opacity_min: 0.05,\n            },\n          },\n        },\n        interactivity: {\n          events: {\n            onclick: {\n              enable: true,\n              mode: 'push',\n            },\n            onHover: {\n              enable: true,\n              mode: 'bubble',\n            },\n          },\n          modes: {\n            push: {\n              particles_nb: 1,\n            },\n            bubble: {\n              size: 10,\n            },\n          },\n        },\n        retina_detect: true,\n      }}\n    />\n  </div>\n)\n\nexport default Particles\n","import React, { useRef, useEffect } from 'react'\nimport { TimelineLite } from 'gsap'\n\nimport './MovieCard.scss'\nimport { MovieCardProps } from './MovieCard.model'\n\nconst MovieCard = ({ text }: MovieCardProps): JSX.Element => {\n  const content = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const tl = new TimelineLite()\n\n    tl.to(content.current, text.split('').length / 2, { top: '-170%' })\n  }, [])\n\n  return (\n    <div style={{padding: 5, border: '1px solid grey', borderRadius: '10px'}}>\n      <div className=\"container\">\n        <section className=\"crawl\">\n          <div className=\"content\" ref={content}>\n            <p>{text}</p>\n          </div>\n        </section>\n      </div>\n    </div>  \n  )\n}\n\nexport default MovieCard\n","import React from 'react'\nimport './Loading.scss'\n\nimport LoadingGIF from '../../assets/loading.gif'\n\nconst Loading = (): JSX.Element => (\n    <div className=\"loading-container\">\n        <img src={LoadingGIF} alt=\"LOADING\" className=\"loading\" />\n        <span className=\"loading-label\">Loading...</span>\n    </div>\n)\n\nexport default Loading\n","import React, { useReducer, Dispatch } from 'react'\nimport { Film, Characters } from '../models/api/Api'\n\ntype actionTypes =\n  | 'SET_ALL_FILMS'\n  | 'SET_ALL_PEOPLE'\n  | 'SET_ALL_PEOPLE_PAGINATION'\n\ntype stateContext = {\n  films: Film[]\n  characters: Characters[]\n  totalCharacters: number\n}\ntype actionContext = { type: actionTypes; payload: any }\n\nconst initialReducerState = {\n  films: [],\n  characters: [],\n  totalCharacters: 0,\n}\n\n\nconst initialStateStore: {\n  state: stateContext\n  dispatch: Dispatch<actionContext>\n} = {\n  state: initialReducerState,\n  dispatch: () => undefined,\n}\nconst store = React.createContext(initialStateStore)\nconst { Provider } = store\n\nconst reducer = (state: stateContext, action: actionContext) => {\n  switch (action.type) {\n    case 'SET_ALL_FILMS':\n      return {\n        ...state,\n        films: action.payload as Film[],\n      }\n    case 'SET_ALL_PEOPLE':\n      return {\n        ...state,\n        characters: action.payload,\n      }\n    case 'SET_ALL_PEOPLE_PAGINATION':\n      return {\n        ...state,\n        characters: action.payload.results,\n        totalCharacters: action.payload.count,\n      }\n    default:\n      return state\n  }\n}\n\ninterface StateProviderProps {\n  children: JSX.Element\n}\n\n\nconst StateProvider = ({ children }: StateProviderProps): JSX.Element => {\n  const [state, dispatch] = useReducer(reducer, initialReducerState)\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>\n}\n\nexport { store, StateProvider }\n","// SIMPLE FETCH FOR TEST\n\nimport { message } from \"antd\"\n\n\n\nconst requiredOptions = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    // 'Access-Control-Allow-Origin' : '*',\n    // 'Access-Control-Allow-Headers' : '*'\n  },\n}\nconst defaultOptions = {\n  method: 'GET'\n}\n\nconst simpleFetch = <T>(url: string, options = defaultOptions  ): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    fetch(url, { ...requiredOptions, ...options })\n      .then((res) => \n         res.json())\n      .then((data) => resolve(data))\n      .catch(() => reject(message.error('Upps something went wrong')))\n  })\n}\n\nexport default simpleFetch\n","const baseUrl = process.env.REACT_APP_SWAPI_DOMAIN\n\nconst URL = {\n  films: `/films`,\n  people: `${baseUrl}/people`,\n  peopleWithPagination: (page: number): string => `${baseUrl}/people/?page=${page}`,\n}\n\nexport default URL\n","import simpleFetch from '../../api/utils/simple-fetch'\nimport { ResponseList, Film, Characters } from '../../models/api/Api'\nimport URL from '../../api/urls'\n\nexport const getFilms = (dispatch: (act: any) => void): void => {\n  simpleFetch<ResponseList<Film>>(URL.films).then((data) => {\n    dispatch({ type: 'SET_ALL_FILMS', payload: data.results })\n  })\n}\n\nexport const getCharacters = (dispatch: (act: any) => void): void => {\n  simpleFetch<ResponseList<Characters>>(URL.people).then((data) => {\n    dispatch({ type: 'SET_ALL_PEOPLE', payload: data.results })\n  })\n}\n\nexport const getCharactersWithPagination = (dispatch: (act: any) => void , page: number): void => {\n  simpleFetch<ResponseList<Characters>>(URL.peopleWithPagination(page)).then((data) => {\n    dispatch({ type: 'SET_ALL_PEOPLE_PAGINATION', payload: data })\n  })\n}","import React, { useEffect, useState, useContext } from 'react'\nimport './FilmScreen.scss'\nimport { Card, CardContent } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport { Film } from '../../models/api/Api'\nimport MovieCard from '../../components/movie-card/MovieCard'\nimport Loading from '../../components/loading/Loading'\nimport { store } from '../../store/store'\nimport { getFilms } from '../../store/api/api-actions'\n\nconst FilmScreen = (): JSX.Element => {\n  const [films, setFilms] = useState<(Film & { isSelected?: boolean })[]>([])\n  const globalState = useContext(store)\n  const { dispatch, state } = globalState\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      if (state.films.length === 0) {\n        getFilms(dispatch)\n      }\n    }, 3000)\n\n    return () => clearTimeout(id)\n  }, [])\n\n  useEffect(() => { \n    setFilms(state.films)\n  }, [state.films])\n\n  const handleCardClick = (title: string) => () => {\n    setFilms((prevState) =>\n      prevState.map((film) => {\n        if (film.title === title) {\n          const newFilm = { ...film }\n          newFilm.isSelected = !film.isSelected\n          return newFilm\n        }\n        return film\n      })\n    )\n  }\n\n  if (state.films.length === 0) {\n    return <Loading />\n  }\n\n  return (\n    <div className=\"film-screen-container\">\n      {films.map((film) => (\n        <Card\n          key={film.title}\n          className=\"film-card\"\n          style={{\n            gridColumnStart: film.isSelected ? 'span 3' : 'unset',\n          }}\n          onClick={handleCardClick(film.title)}\n        >\n          <CardContent className=\"film-card-content\">\n            <div>\n              <h3>\n                <span className=\"film-label\">Movie name: </span>\n                {film.title}\n              </h3>\n              <p>\n                <span className=\"film-label\">Episode number : </span>\n                {film.episode_id}\n              </p>\n              <p>\n                <span className=\"film-label\">Director: </span>\n                {film.director}\n              </p>\n              <p>\n                <Link to=\"/People\">People</Link>\n              </p>\n            </div>\n\n            {film.isSelected && <MovieCard text={film.opening_crawl} />}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n\nexport default FilmScreen\n","import React, { useState } from 'react'\nimport { Table } from 'antd'\nimport { ColumnProps, TablePaginationConfig } from 'antd/lib/table'\n\ninterface TableProps {\n  data: any[]\n  columns?: ColumnProps<any>[]\n  pagination: TablePaginationConfig\n  onPaginationChange: (page: number) => void\n}\n\nconst { Column } = Table\n\nconst TableComponent = ({\n  data,\n  columns,\n  pagination,\n  onPaginationChange,\n}: TableProps): JSX.Element => {\n  const [paginationState, setPagination] = useState<TablePaginationConfig>(pagination)\n\n  const handlePaginationChange = (pag: TablePaginationConfig) => {\n    setPagination(pag)\n    onPaginationChange(pag.current || 1)\n  }\n\n  return (\n    <Table dataSource={data} pagination={paginationState}  onChange={handlePaginationChange}>\n      {columns?.map((column: ColumnProps<any>) => {\n        if (column.render) {\n          return (\n            <Column\n              title={column.title}\n              dataIndex={column.dataIndex}\n              key={column.key}\n              render={column.render}\n              filters={column.filters}\n              onFilter={column.onFilter}\n            />\n          )\n        }\n        return (\n          <Column\n            title={column.title}\n            dataIndex={column.dataIndex}\n            key={column.key}\n            onFilter={column.onFilter}\n            filters={column.filters}\n          />\n        )\n      })}\n    </Table>\n  )\n}\n\nTableComponent.defaultProps = {\n  columns: [],\n}\n\nexport default TableComponent\n","import React, { useEffect, useState, useContext, useRef } from 'react'\nimport { TablePaginationConfig } from 'antd/lib/table'\nimport { Link } from 'react-router-dom'\nimport TableComponent from '../../components/table/Table'\nimport Loading from '../../components/loading/Loading'\nimport { Characters, Film } from '../../models/api/Api'\nimport { store } from '../../store/store'\nimport { getFilms, getCharactersWithPagination } from '../../store/api/api-actions'\n\nfunction formatForTable(films: Film[], characters: Characters[]): Characters[] {\n  const mapLinksToName = films.reduce<{ [key: string]: string }>((prev, current) => {\n    // eslint-disable-next-line no-param-reassign\n    prev[current.url] = current.title\n    return prev\n  }, {})\n\n  return characters.map((character) => {\n    const newFilms = character.films.map((filmUrl) => mapLinksToName[filmUrl])\n\n    return {\n      ...character,\n      films: newFilms,\n    }\n  })\n}\n\nconst isEmpty = (array: any[]) => array.length === 0\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Eye color',\n    dataIndex: 'eye_color',\n    key: 'eye_color',\n    filters: [\n      {\n        text: 'blue',\n        value: 'blue',\n      },\n      {\n        text: 'yellow',\n        value: 'yellow',\n      },\n      {\n        text: 'red',\n        value: 'red',\n      },\n      {\n        text: 'brown',\n        value: 'brown',\n      },\n      {\n        text: 'blue-gray',\n        value: 'blue-gray',\n      },\n    ],\n    onFilter: (value: any, record: any) => {\n      console.log(value, record)\n\n      return record.eye_color.indexOf(value) === 0\n    },\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    key: 'gender',\n    filters: [\n      {\n        text: 'male',\n        value: 'male',\n      },\n      {\n        text: 'female',\n        value: 'female',\n      },\n      {\n        text: 'n/a',\n        value: 'n/a',\n      },\n    ],\n    onFilter: (value: any, record: any) => {\n      console.log(value, record)\n\n      return record.gender.indexOf(value) === 0\n    },\n  },\n  {\n    title: 'List of films',\n    dataIndex: 'films',\n    key: 'films',\n    render: (films: string[]) => (\n      <>\n        {films.map((film) => (\n          <li>\n            <Link to=\"/Films\">{film} </Link>\n          </li>\n        ))}\n      </>\n    ),\n\n    filters: [\n      {\n        text: 'A New Hope',\n        value: 'A New Hope',\n      },\n      {\n        text: 'The Empire Strikes Back',\n        value: 'The Empire Strikes Back',\n      },\n      {\n        text: 'Return of the Jedi',\n        value: 'Return of the Jedi',\n      },\n      {\n        text: 'The Phantom Menace',\n        value: 'The Phantom Menace',\n      },\n      {\n        text: 'Attack of the Clones',\n        value: 'Attack of the Clones',\n      },\n      {\n        text: 'Revenge of the Sith',\n        value: 'Revenge of the Sith',\n      },\n    ],\n    onFilter: (value: any, record: any) => {\n      console.log(value, record)\n\n      return record.films.some((film: any) => film.indexOf(value) === 0)\n    },\n  },\n]\n\nconst getPagination = (total: number): TablePaginationConfig => {\n  return { current: 1, total, showSizeChanger: false }\n}\n\nfunction filterByEyeColor(characters: Characters[]) {\n  return characters.filter((character) => character.eye_color === 'blue')\n}\n\nconst PeopleScreen = (): JSX.Element => {\n  const [characters, setCharacters] = useState<Characters[] | []>([])\n  const globalState = useContext(store)\n  const { dispatch, state } = globalState\n\n  useEffect(() => {\n    if (state.films.length === 0) {\n      getFilms(dispatch)\n    }\n    getCharactersWithPagination(dispatch, 1)\n  }, [])\n\n  useEffect(() => {\n    if (isEmpty(state.characters) || isEmpty(state.films)) return\n\n    setCharacters(formatForTable(state.films, state.characters))\n  }, [state.characters, state.films])\n\n  const prevPage = useRef(1)\n  const handlePaginationChange = (page: number) => {\n    if (page && prevPage.current !== page) {\n      prevPage.current = page\n      getCharactersWithPagination(dispatch, page)\n    }\n  }\n\n  if (state.characters.length === 0) return <Loading />\n\n  return (\n    <TableComponent\n      data={characters}\n      columns={columns}\n      pagination={getPagination(state.totalCharacters)}\n      onPaginationChange={handlePaginationChange}\n    />\n  )\n}\n\nexport default PeopleScreen\n","import React from 'react'\nimport styles from './MainLayout.module.css'\n\ninterface MainLayoutProps {\n    children: JSX.Element\n    title: string\n}\n\nconst MainLayout = ({ children, title }: MainLayoutProps): JSX.Element => (\n    <div className={styles.container}>\n        <h2 className={styles.title}>{title}</h2>\n        {children}\n    </div>\n)\n\nexport default MainLayout\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport HomeScreen from './screens/home/HomeScreen'\nimport NavBar from './components/navbar/Navbar'\nimport Particles from './components/particles/Particles'\nimport FilmScreen from './screens/films/FilmScreen'\nimport PeopleScreen from './screens/people/PeopleScreen'\nimport MainLayout from './layouts/MainLayout'\n\nconst App = (): JSX.Element => (\n  <div>\n    <NavBar items={['Films', 'People']} />\n    <div style={{ display: 'flex', justifyContent: 'space-around ' }}>\n      <div\n        style={{\n          border: '1px solid #e2e2e2',\n          margin: '5rem 5rem 1rem 5rem',\n          width: '10%',\n        }}\n      />\n      <div\n        style={{\n          border: '1px solid #e2e2e2',\n          margin: '5rem 5rem 1rem 5rem',\n          width: '10%',\n        }}\n      />\n    </div>\n    <Particles />\n    <Route path=\"/Films\">\n      <MainLayout title=\"FILMS\">\n        <FilmScreen />\n      </MainLayout>\n    </Route>\n    <Route path=\"/People\">\n      <MainLayout title=\"PEOPLE\">\n        <PeopleScreen />\n      </MainLayout>\n    </Route>\n    <Route path=\"/\" exact>\n      <HomeScreen />\n    </Route>\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { StateProvider } from './store/store'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <BrowserRouter>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </BrowserRouter>, // </React.StrictMode>\n\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__3rMGR\",\"menu\":\"Navbar_menu__115YR\",\"items\":\"Navbar_items__1rHmj\",\"homeIcon\":\"Navbar_homeIcon__4IgOx\"};"],"sourceRoot":""}